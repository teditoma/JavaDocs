Unit testing examples

Unit testing means testing the smaller units of your application, like classes and methods.

The reason you test your code is to prove to yourself, and perhaps to the users / clients / customers, that your code works.

Unit tests are typically automated, meaning once they are implemented, you can run them again and again. That is, your computer can run them again and again, while you do something else.

This tutorial uses JUnit to implement the unit tests. There are other unit test frameworks for Java too, like TestNG.

---------------------------------------

- generate the project
$ mvn archetype:generate -DgroupId=com.timnet -DartifactId=unitTesting -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

$ cd unitTesting

open the project in your IDE ... ?

---------------------------------------

- simple unit test

in src/main/java folder, create a class com.timnet.MyUnit with contents

//
package com.timnet;

public class MyUnit {
    public String concatenate(String one, String two){
        return one + two;
    }
}
//

create the unit test for this class com.timnet.MyUnitTest, in src/test/java folder

//
package com.timnet;

import org.junit.Test;
import static org.junit.Assert.*;

public class MyUnitTest {

    @Test
    public void testConcatenate() {
        MyUnit myUnit = new MyUnit();

        String result = myUnit.concatenate("one", "two");

        assertEquals("onetwo", result);

    }
}
//

!!! you may need to change the junit dependency in your pom.xml, change version to 4.12

$ mvn test

- see @Test annotation (method is a unit test, a test)
- will test myUnit.concatenate method (a single method)
- assertEquals does the actual testing

 In this method we compare the output of the called method (concatenate()) with the expected output. In other words, we compare "onetwo" (expected output) with the value returned by the concatenate() method, which is kept in the variable result.
 
---------------------------------

Assert Methods

- assertArrayEquals

add a new method to MyUnitTest

//
@Test
    public void testGetTheStringArray() {
        MyUnit myUnit = new MyUnit();

        String[] expectedArray = {"one", "two", "three"};

        String[] resultArray =  myUnit.getTheStringArray();

        assertArrayEquals(expectedArray, resultArray);
    }
//

- assertTrue() + assertFalse()

//
@Test
    public void testGetTheBoolean() {
        MyUnit myUnit = new MyUnit();

        assertTrue (myUnit.getTheBoolean());

        assertFalse(myUnit.getTheBoolean());
    }
//

the test will fail ...
pls replace the last statement with an 'assertFalse' in such a way that will pass the test ...

- assertNull() + assertNotNull()

//
@Test
    public void testGetTheObject() {
        MyUnit myUnit = new MyUnit();

        assertNull(myUnit.getTheObject());

        assertNotNull(myUnit.getTheObject());
    }
//

- assertSame() and assertNotSame()
they tests if two object references point to the same object or not. It is not enough that the two objects pointed to are equals according to their equals() methods. It must be exactly the same object pointed to

//
@Test
    public void testGetTheSameObject() {
        MyUnit myUnit = new MyUnit();

        assertSame   (myUnit.getTheSameObject(),
                      myUnit.getTheSameObject());
        
        assertNotSame(myUnit.getTheSameObject(),
                      myUnit.getTheSameObject());
    }
//

-----------------------------------------------------------------------------

assert with matchers

- assertThat()
The assertThat() method compares an object to an org.hamcrest.Matcher to see if the given object matches whatever the Matcher requires it to match.

//
@Test
    public void testWithMatchers() {
        assertThat("this string", is("this string"));
        assertThat(123, is(123));
    }
//

Chaining Matchers

//
@Test
public void testWithMatchers() {

    assertThat(123, not( is(345) ) );

}
//

Core matchers
Core
	any()	Matches anything
	is()	A matcher that checks if the given objects are equal.
	describedAs()	Adds a descrption to a Matcher
Logical
	allOf()	Takes an array of matchers, and all matchers must match the target object.
	anyOf()	Takes an array of matchers, and at least one of the matchers must report that it matches the target object.
	not()	Negates the output of the previous matcher.
Object
	equalTo()	A matcher that checks if the given objects are equal.
	instanceOf()	Checks if the given object is of type X or is compatible with type X
	notNullValue() + 
	nullValue()	Tests whether the given object is null or not null.
	sameInstance()	Tests if the given object is the exact same instance as another.

-------------------------------------------------------------------------

Test for exceptions

Sometimes you may want to test that your code throws the right exceptions when given invalid input, or if executed in an invalid state. There are two ways to do this.

The first way to signal that it is expected that the test method results in an exception being thrown, is to add the expected attribute to the @Test annotation, like this:

//
@Test(expected = IllegalArgumentException.class)
public void testForExceptions1() {
    MyUnit myUnit = new MyUnit();

    myUnit.throwIllegalArgumentException();
}
//
	
The second way is to wrap the code you expect to throw an exception in a try-catch block, like this:

//
@Test
public void testForExceptions2() {
    MyUnit myUnit = new MyUnit();

    try{
        myUnit.throwIllegalArgumentException();

        fail("expected IllegalArgumentException");

    } catch(IllegalArgumentException e){
        //ignore, this exception is expected.
    }
//

see try-catch and fail !!!

Notice the fail() method call after the call to myUnit.throwIllegalArgumentException(). If the throwIllegalArgumentException() method returns normall, then this fail() call is executed, causing the test to fail.

Correspondingly, if the throwIllegalArgumentException() method throws the expected IllegalArgumentException, it is caught in the catch-clause, and ignored. The test continues.

--------------------------------------------------

Ignore a test

 just add a @Ignore annotation before or after the @Test method.
 //
 @Ignore
    @Test
    public void testMath2() {
        assertThat(1 + 2, is(5));
    }

    @Ignore("some one please create a test for Math3!")
    @Test
    public void testMath3() {
        //...
    }
	//
	
-------------------------------------------------

Timeout test

If a test is taking longer than a defined “timeout” to finish, a TestTimedOutException will be thrown and the test marked failed.

- create a new class in src/test/java

//
package com.timnet;

public class TimeoutTest {
    
}
//

- timeout applied to asingle method, value in ms

//
//This test will always failed :)
    @Test(timeout = 1000)
    public void infinity() {
        while (true) ;
    }

    //This test can't run more than 5 seconds, else failed
    @Test(timeout = 5000)
    public void testSlowMethod() {
        //...
    }
	//
	
- global timeout
create a global timeout rule, this rule will apply to all the test methods in a class

//
package com.timnet;

import java.util.concurrent.TimeUnit;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Timeout;

public class GlobalTimeoutTest {

    //global timeout rule
    @Rule
    public Timeout globalTimeout = Timeout.seconds(1);

    //This test will be failed, because it will take more than 1 second to finish!
    @Test
    public void testSlowMethod1() throws InterruptedException {
        //...
        TimeUnit.SECONDS.sleep(5000);
    }

    //passed
    @Test
    public void testSlowMethod2() {
        //...
    }
}
//

In the above example, a global Timeout rule is declared, both the testSlowMethod1() and testSlowMethod2() must finish the test within 1 second, else the test will be failed.

--------------------------------------------------------
List test

- in your pom.xml, first exclude the JUnit bundled copy of hamcrest-core, and include the useful hamcrest-library, it contains many useful methods to test the List data type.

//
<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>4.12</version>
		<scope>test</scope>
		<exclusions>
			<exclusion>
				<groupId>org.hamcrest</groupId>
				<artifactId>hamcrest-core</artifactId>
			</exclusion>
		</exclusions>
	</dependency>
	<!-- This will get hamcrest-core automatically -->
	<dependency>
		<groupId>org.hamcrest</groupId>
		<artifactId>hamcrest-library</artifactId>
		<version>1.3</version>
		<scope>test</scope>
	</dependency>
//

Check the package org.hamcrest.collection, it contains many useful methods to test a Collection or List

- create test unit (test class) com.timnet.ListTest 

//
package com.timnet;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.hamcrest.collection.IsEmptyCollection;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.collection.IsCollectionWithSize.hasSize;
import static org.hamcrest.collection.IsIterableContainingInAnyOrder.containsInAnyOrder;
import static org.hamcrest.collection.IsIterableContainingInOrder.contains;
import static org.hamcrest.MatcherAssert.assertThat;

public class ListTest {

    @Test
    public void testAssertList() {

        List<String> actual = Arrays.asList("a", "b", "c");
        List<String> expected = Arrays.asList("a", "b", "c");

		//All passed / true

        //1. Test equal.
        assertThat(actual, is(expected));

        //2. If List has this value?
        assertThat(actual, hasItems("b"));

        //3. Check List Size
        assertThat(actual, hasSize(3));

        assertThat(actual.size(), is(3));

        //4.  List order

        // Ensure Correct order
        assertThat(actual, contains("a", "b", "c"));

        // Can be any order
        assertThat(actual, containsInAnyOrder("c", "b", "a"));

        //5. check empty list
        assertThat(actual, not(IsEmptyCollection.empty()));

        assertThat(new ArrayList<>(), IsEmptyCollection.empty());
    }

}
//

- Assert List Integer
Check the package org.hamcrest.number, it has methods to assert numbers.

...

---------------------------------------------------------------------------

Test a map

Forget about JUnit assertEquals(), to test a Map, uses the more expressive IsMapContaining class from hamcrest-library.jar

IsMapContaining Examples:

//
package com.timnet;

import java.util.HashMap;
import java.util.Map;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.MatcherAssert.assertThat;
import org.hamcrest.collection.IsMapContaining;
import org.junit.Test;

public class MapTest {

    @Test
    public void testAssertMap() {

        Map<String, String> map = new HashMap<>();
        map.put("j", "java");
        map.put("c", "c++");
        map.put("p", "python");
        map.put("n", "node");

        Map<String, String> expected = new HashMap<>();
        expected.put("n", "node");
        expected.put("c", "c++");
        expected.put("j", "java");
        expected.put("p", "python");

        //All passed / true
        //1. Test equal, ignore order
        assertThat(map, is(expected));

        //2. Test size
        assertThat(map.size(), is(4));

        //3. Test map entry, best!
        assertThat(map, IsMapContaining.hasEntry("n", "node"));

        assertThat(map, not(IsMapContaining.hasEntry("r", "ruby")));

        //4. Test map key
        assertThat(map, IsMapContaining.hasKey("j"));

        //5. Test map value
        assertThat(map, IsMapContaining.hasValue("node"));

    }
}
//

-------------------------------------------------------------------

Assert if a property exists in a class

Includes hamcrest-library and test the class property and its value with hasProperty() :

... see ClassPropertyTest

---------------------------------------------------------------------

??? Mocking ...

http://www.mkyong.com/unittest/unit-test-what-is-mocking-and-why/

	
	
	
	
	
	
	
	

See:

Jenkov junit tutorial
http://tutorials.jenkov.com/java-unit-testing/index.html

mkyong junit tutorial
http://www.mkyong.com/tutorials/junit-tutorials/